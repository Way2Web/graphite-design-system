/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface GraButton {
        /**
          * Set to true to draw a circle button.
         */
        "circle": boolean;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled": boolean;
        /**
          * Set to `"block"` for a full-width button or to `"full"` for a full-width button without left and right borders.
         */
        "expand"?: 'full' | 'block';
        /**
          * Contains a URL or a URL fragment that the hyperlink points to.
         */
        "href": string | undefined;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel": string | undefined;
        /**
          * The button's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Specifies where to display the linked URL. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target": string | undefined;
        /**
          * The type of the button.
         */
        "type": 'submit' | 'reset' | 'button';
        /**
          * The different variants. The options are: `"default"`, `"primary"`, `"secondary"`, "danger", and `"text"`.
         */
        "variant"?: 'default' | 'primary' | 'secondary' | 'danger' | 'text';
    }
    interface GraCheckbox {
        /**
          * Draws the checkbox in a checked state.
         */
        "checked": boolean;
        /**
          * Disables the checkbox.
         */
        "disabled": boolean;
        /**
          * Draws the checkbox in an indeterminate state.
         */
        "indeterminate": boolean;
        /**
          * The checkbox's name attribute.
         */
        "name": string;
        /**
          * Removes focus from the checkbox.
         */
        "removeFocus": () => Promise<void>;
        /**
          * Makes the checkbox a required field.
         */
        "required": boolean;
        /**
          * Sets focus on the checkbox.
         */
        "setFocus": () => Promise<void>;
        /**
          * The checkbox's value attribute.
         */
        "value": string;
    }
    interface GraInput {
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        /**
          * Specifies what if label and input must be inline.
         */
        "inline": boolean;
        /**
          * The input's label. Alternatively, you can use the label slot.
         */
        "label": string | undefined;
        /**
          * The input's name attribute.
         */
        "name": string | undefined;
        /**
          * The input's size.
         */
        "size": 'small' | 'medium' | 'large';
        /**
          * Specifies what type of input to use.
         */
        "type": string | undefined;
    }
    interface GraTextarea {
        /**
          * If `true`, the textarea should autofocus.
         */
        "autofocus": boolean;
        /**
          * If `true`, the user cannot interact with the textarea.
         */
        "disabled": boolean;
        /**
          * The textarea's label. Alternatively, you can use the label slot.
         */
        "label": string | undefined;
        /**
          * Specifies how many characters are allowed.
         */
        "maxlength": number;
        /**
          * The textarea's name attribute.
         */
        "name": string | undefined;
        /**
          * Specifies how many textarea rows to use.
         */
        "rows": number | undefined;
        /**
          * Specifies what type of textarea to use.
         */
        "type": string | undefined;
    }
}
declare global {
    interface HTMLGraButtonElement extends Components.GraButton, HTMLStencilElement {
    }
    var HTMLGraButtonElement: {
        prototype: HTMLGraButtonElement;
        new (): HTMLGraButtonElement;
    };
    interface HTMLGraCheckboxElement extends Components.GraCheckbox, HTMLStencilElement {
    }
    var HTMLGraCheckboxElement: {
        prototype: HTMLGraCheckboxElement;
        new (): HTMLGraCheckboxElement;
    };
    interface HTMLGraInputElement extends Components.GraInput, HTMLStencilElement {
    }
    var HTMLGraInputElement: {
        prototype: HTMLGraInputElement;
        new (): HTMLGraInputElement;
    };
    interface HTMLGraTextareaElement extends Components.GraTextarea, HTMLStencilElement {
    }
    var HTMLGraTextareaElement: {
        prototype: HTMLGraTextareaElement;
        new (): HTMLGraTextareaElement;
    };
    interface HTMLElementTagNameMap {
        "gra-button": HTMLGraButtonElement;
        "gra-checkbox": HTMLGraCheckboxElement;
        "gra-input": HTMLGraInputElement;
        "gra-textarea": HTMLGraTextareaElement;
    }
}
declare namespace LocalJSX {
    interface GraButton {
        /**
          * Set to true to draw a circle button.
         */
        "circle"?: boolean;
        /**
          * If `true`, the user cannot interact with the button.
         */
        "disabled"?: boolean;
        /**
          * Set to `"block"` for a full-width button or to `"full"` for a full-width button without left and right borders.
         */
        "expand"?: 'full' | 'block';
        /**
          * Contains a URL or a URL fragment that the hyperlink points to.
         */
        "href"?: string | undefined;
        /**
          * Emitted when the button has focus.
         */
        "onGraFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the button loses focus.
         */
        "onWayBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Specifies the relationship of the target object to the link object. The value is a space-separated list of [link types](https://developer.mozilla.org/en-US/docs/Web/HTML/Link_types).
         */
        "rel"?: string | undefined;
        /**
          * The button's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * Specifies where to display the linked URL. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target"?: string | undefined;
        /**
          * The type of the button.
         */
        "type"?: 'submit' | 'reset' | 'button';
        /**
          * The different variants. The options are: `"default"`, `"primary"`, `"secondary"`, "danger", and `"text"`.
         */
        "variant"?: 'default' | 'primary' | 'secondary' | 'danger' | 'text';
    }
    interface GraCheckbox {
        /**
          * Draws the checkbox in a checked state.
         */
        "checked"?: boolean;
        /**
          * Disables the checkbox.
         */
        "disabled"?: boolean;
        /**
          * Draws the checkbox in an indeterminate state.
         */
        "indeterminate"?: boolean;
        /**
          * The checkbox's name attribute.
         */
        "name"?: string;
        /**
          * Emitted when the checkbox loses focus.
         */
        "onGraBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the checkbox loses focus.
         */
        "onGraChange"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the checkbox has focus.
         */
        "onGraFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Makes the checkbox a required field.
         */
        "required"?: boolean;
        /**
          * The checkbox's value attribute.
         */
        "value"?: string;
    }
    interface GraInput {
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        /**
          * Specifies what if label and input must be inline.
         */
        "inline"?: boolean;
        /**
          * The input's label. Alternatively, you can use the label slot.
         */
        "label"?: string | undefined;
        /**
          * The input's name attribute.
         */
        "name"?: string | undefined;
        /**
          * Emitted when the input has focus.
         */
        "onGraFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the input loses focus.
         */
        "onWayBlur"?: (event: CustomEvent<void>) => void;
        /**
          * The input's size.
         */
        "size"?: 'small' | 'medium' | 'large';
        /**
          * Specifies what type of input to use.
         */
        "type"?: string | undefined;
    }
    interface GraTextarea {
        /**
          * If `true`, the textarea should autofocus.
         */
        "autofocus"?: boolean;
        /**
          * If `true`, the user cannot interact with the textarea.
         */
        "disabled"?: boolean;
        /**
          * The textarea's label. Alternatively, you can use the label slot.
         */
        "label"?: string | undefined;
        /**
          * Specifies how many characters are allowed.
         */
        "maxlength"?: number;
        /**
          * The textarea's name attribute.
         */
        "name"?: string | undefined;
        /**
          * Emitted when the textarea has focus.
         */
        "onGraFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Emitted when the textarea loses focus.
         */
        "onWayBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Specifies how many textarea rows to use.
         */
        "rows"?: number | undefined;
        /**
          * Specifies what type of textarea to use.
         */
        "type"?: string | undefined;
    }
    interface IntrinsicElements {
        "gra-button": GraButton;
        "gra-checkbox": GraCheckbox;
        "gra-input": GraInput;
        "gra-textarea": GraTextarea;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "gra-button": LocalJSX.GraButton & JSXBase.HTMLAttributes<HTMLGraButtonElement>;
            "gra-checkbox": LocalJSX.GraCheckbox & JSXBase.HTMLAttributes<HTMLGraCheckboxElement>;
            "gra-input": LocalJSX.GraInput & JSXBase.HTMLAttributes<HTMLGraInputElement>;
            "gra-textarea": LocalJSX.GraTextarea & JSXBase.HTMLAttributes<HTMLGraTextareaElement>;
        }
    }
}
